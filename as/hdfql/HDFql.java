/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package as.hdfql;

public class HDFql implements HDFqlConstants {

		@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
		@java.lang.annotation.Target(java.lang.annotation.ElementType.FIELD)
		public @interface Map
		{
			String member();
		}


		@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
		@java.lang.annotation.Target(java.lang.annotation.ElementType.FIELD)
		public @interface Ignore
		{

		}


		private static Variable variableList[] = {null, null, null, null, null, null, null, null};


		static
		{
			Runtime.getRuntime().addShutdownHook(new Thread(()->variableUnregisterAll()));
			setEnvironment();
		}


		private HDFql()   // set constructor visibility to private (i.e. disable class instantiation)
		{

		}


		private static class Variable
		{
			public Object variable;
			public Class type;
			public Class className;


			public Variable(Object variable, Class type, Class className)
			{
				this.variable = variable;
				this.type = type;
				this.className = className;
			}
		}


		public static int execute(String script)
		{
			int status;
			int i;


			if (script == null)
			{
				return executeReset();
			}

			status = execute(script, script.length(), JAVA);
			if ((status & 0x100) != 0)   // check if a transient variable was used
			{
				for(i = 0; i < 8; i++)
				{
					if ((status & (1 << (i + 9))) != 0)
					{
						variableList[i] = null;
					}
				}
				status &= 0x000000FF;
			}

			if (status > 127)
			{
				return status - 256;
			}
			else
			{
				return status;
			}
		}


		public static int cursorInitialize()
		{
			return cursorInitialize(null);
		}


		public static int cursorClear()
		{
			return cursorClear(null);
		}


		public static int cursorClone(HDFqlCursor cursorClone)
		{
			return cursorClone(null, cursorClone);
		}


		public static int cursorGetDataType()
		{
			return cursorGetDataType(null);
		}


		public static long cursorGetCount()
		{
			return cursorGetCount(null);
		}


		public static int subcursorGetCount()
		{
			return subcursorGetCount(null);
		}


		public static int cursorGetDimensionCount()
		{
			return cursorGetDimensionCount(null);
		}


		public static long cursorGetDimension(int index)
		{
			return cursorGetDimension(null, index);
		}


		public static long cursorGetPosition()
		{
			return cursorGetPosition(null);
		}


		public static int subcursorGetPosition()
		{
			return subcursorGetPosition(null);
		}


		public static int cursorFirst()
		{
			return cursorFirst(null);
		}


		public static int subcursorFirst()
		{
			return subcursorFirst(null);
		}


		public static int cursorLast()
		{
			return cursorLast(null);
		}


		public static int subcursorLast()
		{
			return subcursorLast(null);
		}


		public static int cursorNext()
		{
			return cursorNext(null);
		}


		public static int subcursorNext()
		{
			return subcursorNext(null);
		}


		public static int cursorPrevious()
		{
			return cursorPrevious(null);
		}


		public static int subcursorPrevious()
		{
			return subcursorPrevious(null);
		}


		public static int cursorAbsolute(long position)
		{
			return cursorAbsolute(null, position);
		}


		public static int subcursorAbsolute(int position)
		{
			return subcursorAbsolute(null, position);
		}


		public static int cursorRelative(long position)
		{
			return cursorRelative(null, position);
		}


		public static int subcursorRelative(int position)
		{
			return subcursorRelative(null, position);
		}


		public static java.lang.Byte cursorGetTinyint()
		{
			return cursorGetTinyint(null);
		}


		public static java.lang.Byte subcursorGetTinyint()
		{
			return subcursorGetTinyint(null);
		}


		public static java.lang.Byte cursorGetUnsignedTinyint()
		{
			return cursorGetUnsignedTinyint(null);
		}


		public static java.lang.Byte subcursorGetUnsignedTinyint()
		{
			return subcursorGetUnsignedTinyint(null);
		}


		public static java.lang.Short cursorGetSmallint()
		{
			return cursorGetSmallint(null);
		}


		public static java.lang.Short subcursorGetSmallint()
		{
			return subcursorGetSmallint(null);
		}


		public static java.lang.Short cursorGetUnsignedSmallint()
		{
			return cursorGetUnsignedSmallint(null);
		}


		public static java.lang.Short subcursorGetUnsignedSmallint()
		{
			return subcursorGetUnsignedSmallint(null);
		}


		public static java.lang.Integer cursorGetInt()
		{
			return cursorGetInt(null);
		}


		public static java.lang.Integer subcursorGetInt()
		{
			return subcursorGetInt(null);
		}


		public static java.lang.Integer cursorGetUnsignedInt()
		{
			return cursorGetUnsignedInt(null);
		}


		public static java.lang.Integer subcursorGetUnsignedInt()
		{
			return subcursorGetUnsignedInt(null);
		}


		public static java.lang.Long cursorGetBigint()
		{
			return cursorGetBigint(null);
		}


		public static java.lang.Long subcursorGetBigint()
		{
			return subcursorGetBigint(null);
		}


		public static java.lang.Long cursorGetUnsignedBigint()
		{
			return cursorGetUnsignedBigint(null);
		}


		public static java.lang.Long subcursorGetUnsignedBigint()
		{
			return subcursorGetUnsignedBigint(null);
		}


		public static java.lang.Float cursorGetFloat()
		{
			return cursorGetFloat(null);
		}


		public static java.lang.Float subcursorGetFloat()
		{
			return subcursorGetFloat(null);
		}


		public static java.lang.Double cursorGetDouble()
		{
			return cursorGetDouble(null);
		}


		public static java.lang.Double subcursorGetDouble()
		{
			return subcursorGetDouble(null);
		}


		public static String cursorGetChar()
		{
			return cursorGetChar(null);
		}


		public static int variableRegister(Object variable)
		{
			return variableRegister(variable, null, NO);
		}


		public static int variableRegister(Object variable, Class variableClass)
		{
			return variableRegister(variable, variableClass, NO);
		}


		public static int variableTransientRegister(Object variable)
		{
			return variableRegister(variable, null, YES);
		}


		public static int variableTransientRegister(Object variable, Class variableClass)
		{
			return variableRegister(variable, variableClass, YES);
		}


		public static int variableUnregister(Object variable)
		{
			int i;


			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					variableUnregister(i);
					variableList[i] = null;
					return SUCCESS;
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static void variableUnregisterAll()
		{
			int i;


			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null)
				{
					variableUnregister(i);
					variableList[i] = null;
				}
			}
		}


		public static int variableGetNumber(Object variable)
		{
			int i;


			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return i;
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static int variableGetDataType(Object variable)
		{
			int i;


			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return variableGetDataType(i);
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static long variableGetCount(Object variable)
		{
			int i;


			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return variableGetCount(i);
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static int variableGetDimensionCount(Object variable)
		{
			int i;


			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return variableGetDimensionCount(i);
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static long variableGetDimension(Object variable, int index)
		{
			int i;


			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && variable.equals(variableList[i].variable))
				{
					return variableGetDimension(i, index);
				}
			}

			return ERROR_NOT_REGISTERED;
		}


		public static int mpiUseCommunicator(Object communicator)
		{
			return ERROR_NOT_SUPPORTED;
		}


		private static int variableRegister(Object variable, Class variableClass, int variableTransient)
		{
			Class tmp;
			int status;
			int number;
			int count;
			int i;


			if (variable == null)
			{
				return ERROR_NO_ADDRESS;
			}

			tmp = variable.getClass();
			if (tmp.isArray() == false)   // only arrays are allowed (otherwise it is not possible to have a "real" reference of the object being registered)
			{
				return ERROR_UNEXPECTED_DATA_TYPE;
			}

			count = 0;
			do
			{
				count++;
				tmp = tmp.getComponentType();
			}
			while(tmp.isArray() == true);

			if (tmp == boolean.class || tmp == Boolean.class || tmp == char.class || tmp == Character.class)
			{
				return ERROR_UNEXPECTED_DATA_TYPE;
			}

			number = -1;
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] == null)
				{
					if (number == -1)
					{
						number = i;
					}
				}
				else
				{
					if (variable.equals(variableList[i].variable))
					{
						status = variableRegister(i, variableTransient, count, null, null);
						if (status != SUCCESS)
						{
							return status;
						}
						return i;
					}
				}
			}

			if (number == -1)
			{
				return ERROR_FULL;
			}

			if (tmp == byte.class || tmp == Byte.class || tmp == short.class || tmp == Short.class || tmp == int.class || tmp == Integer.class || tmp == long.class || tmp == Long.class || tmp == float.class || tmp == Float.class || tmp == double.class || tmp == Double.class || tmp == String.class || tmp == java.util.ArrayList.class)
			{
				status = variableRegister(number, variableTransient, count, null, null);
			}
			else if (tmp == Object.class)
			{
				if (variableClass == null)
				{
					status = variableRegister(number, variableTransient, count, null, null);
				}
				else
				{
					status = variableRegister(number, variableTransient, count, variableClass.getName().replace(".", "/"), variableGetFields(variableClass, null));
				}
			}
			else   // User-defined class (i.e. compound)
			{
				status = variableRegister(number, variableTransient, count, tmp.getName().replace(".", "/"), variableGetFields(tmp, null));
			}

			if (status != SUCCESS)
			{
				return status;
			}

			variableList[number] = new Variable(variable, tmp, variableClass);

			return number;
		}


		private static java.util.ArrayList<Object> variableGetFields(Class type, String parentName)
		{
			java.lang.reflect.Field fieldList[];
			java.util.ArrayList<Object> result;
			HDFql.Map map;
			String className;
			String fieldName;
			String fullName;
			Class tmp;
			int count;
			int i;


			result = null;
			fieldList = type.getDeclaredFields();
			for(i = 0; i < fieldList.length; i++)
			{
				if (fieldList[i].isAnnotationPresent(HDFql.Ignore.class) == false)
				{
					fieldName = fieldList[i].getName();
					map = fieldList[i].getAnnotation(HDFql.Map.class);
					if (map == null)
					{
						if (parentName == null)
						{
							fullName = fieldName;
						}
						else
						{
							fullName = parentName + "." + fieldName;
						}
					}
					else
					{
						if (parentName == null)
						{
							fullName = map.member();
						}
						else
						{
							fullName = parentName + "." + map.member();
						}
					}

					if (result == null)
					{
						result = new java.util.ArrayList<Object>();
					}

					count = 0;
					tmp = fieldList[i].getType();
					if (tmp.isArray() == false)
					{
						if (tmp == byte.class)   // it includes HDFQL_OPAQUE data type as well
						{
							className = "B";
						}
						else if (tmp == Byte.class)   // it includes HDFQL_OPAQUE data type as well
						{
							className = "Ljava/lang/Byte;";
						}
						else if (tmp == short.class)
						{
							className = "S";
						}
						else if (tmp == Short.class)
						{
							className = "Ljava/lang/Short;";
						}
						else if (tmp == int.class)
						{
							className = "I";
						}
						else if (tmp == Integer.class)
						{
							className = "Ljava/lang/Integer;";
						}
						else if (tmp == long.class)
						{
							className = "J";
						}
						else if (tmp == Long.class)
						{
							className = "Ljava/lang/Long;";
						}
						else if (tmp == float.class)
						{
							className = "F";
						}
						else if (tmp == Float.class)
						{
							className = "Ljava/lang/Float;";
						}
						else if (tmp == double.class)
						{
							className = "D";
						}
						else if (tmp == Double.class)
						{
							className = "Ljava/lang/Double;";
						}
						else if (tmp == String.class)
						{
							className = "Ljava/lang/String;";
						}
						else if (tmp == String.class)
						{
							className = "Ljava/util/ArrayList;";
						}
						else
						{
							if (tmp != boolean.class && tmp != Boolean.class && tmp != char.class && tmp != Character.class && fieldName.startsWith("this$") == false)   // User-defined class (i.e. compound)
							{
								className = "L" + tmp.getName().replace(".", "/") + ";";
							}
							else
							{
								className = null;
							}
						}
					}
					else
					{
						className = tmp.getName().replace(".", "/");
						do
						{
							count++;
							tmp = tmp.getComponentType();
						}
						while(tmp.isArray() == true);
					}

					if (tmp == byte.class)   // it includes HDFQL_OPAQUE data type as well
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(0);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == Byte.class)   // it includes HDFQL_OPAQUE data type as well
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(1);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == short.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(2);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == Short.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(3);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == int.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(4);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == Integer.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(5);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == long.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(6);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == Long.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(7);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == float.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(8);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == Float.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(9);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == double.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(10);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == Double.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(11);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == String.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(12);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else if (tmp == java.util.ArrayList.class)
					{
						result.add(type);
						result.add(fullName);
						result.add(fieldName);
						result.add(count);
						result.add(13);
						result.add(className);
						result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
						result.add(null);
					}
					else
					{
						if (tmp != boolean.class && tmp != Boolean.class && tmp != char.class && tmp != Character.class && fieldName.startsWith("this$") == false)   // User-defined class (i.e. compound)
						{
							result.add(type);
							result.add(fullName);
							result.add(fieldName);
							result.add(count);
							result.add(14);
							result.add(className);
							result.add(java.lang.reflect.Modifier.isStatic(fieldList[i].getModifiers()) ? 1 : 0);
							result.add(variableGetFields(tmp, fullName));
						}
					}
				}
			}

			return result;
		}


		private static long variableCopyFrom(int number, int type, long count)
		{
			Class tmp;
			long current;


			tmp = variableList[number].type;
			if (tmp == byte.class || tmp == short.class || tmp == int.class || tmp == long.class || tmp == float.class ||  tmp == double.class)
			{
				current = variableSetPrimitive(variableList[number].variable, number, type, count);
			}
			else if (tmp == Object.class)
			{
				if (((Object []) variableList[number].variable).length == 0)
				{
					current = count;
				}
				else
				{
					if (type == TINYINT || type == UNSIGNED_TINYINT || type == SMALLINT || type == UNSIGNED_SMALLINT || type == INT || type == UNSIGNED_INT || type == BIGINT || type == UNSIGNED_BIGINT || type == FLOAT || type == DOUBLE || type == CHAR || type == OPAQUE)
					{
						current = variableSetPrimitive(((Object []) variableList[number].variable)[0], number, type, count);
					}
					else
					{
						current = variableSetObject(((Object []) variableList[number].variable)[0], number, type, count);
					}
				}
			}
			else   // Byte.class, Short.class, Integer.class, Long.class, Float.class, Double.class, String.class, java.util.ArrayList.class or user-defined class (i.e. compound)
			{
				current = variableSetObject(variableList[number].variable, number, type, count);
			}

			return current;
		}


		private static int variableCopyInto(int number, int type, long count)
		{
			Class tmp;


			tmp = variableList[number].type;
			if (tmp == byte.class || tmp == short.class || tmp == int.class || tmp == long.class || tmp == float.class || tmp == double.class)
			{
				variableGetPrimitive(variableList[number].variable, number, type, count);
			}
			else if (tmp == Object.class)
			{
				if (((Object []) variableList[number].variable).length == 0)
				{
					return ERROR_EMPTY;
				}
				try
				{
					if (type == TINYINT || type == UNSIGNED_TINYINT || type == CHAR || type == OPAQUE)
					{
						byte object[] = new byte[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetPrimitive(object, number, type, count);
					}
					else if (type == SMALLINT || type == UNSIGNED_SMALLINT)
					{
						short object[] = new short[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetPrimitive(object, number, type, count);
					}
					else if (type == INT || type == UNSIGNED_INT)
					{
						int object[] = new int[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetPrimitive(object, number, type, count);
					}
					else if (type == BIGINT || type == UNSIGNED_BIGINT)
					{
						long object[] = new long[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetPrimitive(object, number, type, count);
					}
					else if (type == FLOAT)
					{
						float object[] = new float[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetPrimitive(object, number, FLOAT, count);
					}
					else if (type == DOUBLE)
					{
						double object[] = new double[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetPrimitive(object, number, DOUBLE, count);
					}
					else if (type == VARTINYINT || type == UNSIGNED_VARTINYINT)
					{
						@SuppressWarnings("unchecked")
						java.util.ArrayList<Byte> object[] = new java.util.ArrayList[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetObject(object, number, type, count);
					}
					else if (type == VARSMALLINT || type == UNSIGNED_VARSMALLINT)
					{
						@SuppressWarnings("unchecked")
						java.util.ArrayList<Short> object[] = new java.util.ArrayList[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetObject(object, number, type, count);
					}
					else if (type == VARINT || type == UNSIGNED_VARINT)
					{
						@SuppressWarnings("unchecked")
						java.util.ArrayList<Integer> object[] = new java.util.ArrayList[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetObject(object, number, type, count);
					}
					else if (type == VARBIGINT || type == UNSIGNED_VARBIGINT)
					{
						@SuppressWarnings("unchecked")
						java.util.ArrayList<Long> object[] = new java.util.ArrayList[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetObject(object, number, type, count);
					}
					else if (type == VARFLOAT)
					{
						@SuppressWarnings("unchecked")
						java.util.ArrayList<Float> object[] = new java.util.ArrayList[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetObject(object, number, type, count);
					}
					else if (type == VARDOUBLE)
					{
						@SuppressWarnings("unchecked")
						java.util.ArrayList<Double> object[] = new java.util.ArrayList[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetObject(object, number, type, count);
					}
					else if (type == VARCHAR)
					{
						String object[] = new String[(int) count];


						((Object []) variableList[number].variable)[0] = object;
						variableGetObject(object, number, VARCHAR, count);
					}
					else   // User-defined class (i.e. compound)
					{
						Object object;


						if (variableList[number].className == null)
						{
							return ERROR_NOT_SPECIFIED;
						}
						object = java.lang.reflect.Array.newInstance(variableList[number].className, (int) count);
						((Object []) variableList[number].variable)[0] = object;
						variableGetObject(object, number, COMPOUND, count);
					}
				}
				catch(OutOfMemoryError e)
				{
					return ERROR_NOT_ENOUGH_MEMORY;
				}
				catch(Exception e)
				{
					return ERROR_UNKNOWN;
				}
			}
			else   // Byte.class, Short.class, Integer.class, Long.class, Float.class, Double.class, String.class, java.util.ArrayList.class or user-defined class (i.e. compound)
			{
				variableGetObject(variableList[number].variable, number, type, count);
			}

			return SUCCESS;
		}

  public static int executeGetStatus() {
    return HDFqlJNI.executeGetStatus();
  }

  public static int errorGetLine() {
    return HDFqlJNI.errorGetLine();
  }

  public static int errorGetPosition() {
    return HDFqlJNI.errorGetPosition();
  }

  public static String errorGetMessage() {
    return HDFqlJNI.errorGetMessage();
  }

  public static int mpiUseDefaultCommunicator() {
    return HDFqlJNI.mpiUseDefaultCommunicator();
  }

  public static int mpiGetSize() {
    return HDFqlJNI.mpiGetSize();
  }

  public static int mpiGetRank() {
    return HDFqlJNI.mpiGetRank();
  }

  private static int executeReset() {
    return HDFqlJNI.executeReset();
  }

  public static int cursorInitialize(HDFqlCursor cursor) {
    return HDFqlJNI.cursorInitialize(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorUse(HDFqlCursor cursor) {
    return HDFqlJNI.cursorUse(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static void cursorUseDefault() {
    HDFqlJNI.cursorUseDefault();
  }

  public static int cursorClear(HDFqlCursor cursor) {
    return HDFqlJNI.cursorClear(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorClone(HDFqlCursor cursorOriginal, HDFqlCursor cursorClone) {
    return HDFqlJNI.cursorClone(HDFqlCursor.getCPtr(cursorOriginal), cursorOriginal, HDFqlCursor.getCPtr(cursorClone), cursorClone);
  }

  public static int cursorGetDataType(HDFqlCursor cursor) {
    return HDFqlJNI.cursorGetDataType(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static long cursorGetCount(HDFqlCursor cursor) {
    return HDFqlJNI.cursorGetCount(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorGetCount(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorGetCount(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorGetDimensionCount(HDFqlCursor cursor) {
    return HDFqlJNI.cursorGetDimensionCount(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static long cursorGetDimension(HDFqlCursor cursor, int index) {
    return HDFqlJNI.cursorGetDimension(HDFqlCursor.getCPtr(cursor), cursor, index);
  }

  public static long cursorGetPosition(HDFqlCursor cursor) {
    return HDFqlJNI.cursorGetPosition(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorGetPosition(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorGetPosition(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorFirst(HDFqlCursor cursor) {
    return HDFqlJNI.cursorFirst(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorFirst(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorFirst(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorLast(HDFqlCursor cursor) {
    return HDFqlJNI.cursorLast(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorLast(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorLast(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorNext(HDFqlCursor cursor) {
    return HDFqlJNI.cursorNext(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorNext(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorNext(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorPrevious(HDFqlCursor cursor) {
    return HDFqlJNI.cursorPrevious(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int subcursorPrevious(HDFqlCursor cursor) {
    return HDFqlJNI.subcursorPrevious(HDFqlCursor.getCPtr(cursor), cursor);
  }

  public static int cursorAbsolute(HDFqlCursor cursor, long position) {
    return HDFqlJNI.cursorAbsolute(HDFqlCursor.getCPtr(cursor), cursor, position);
  }

  public static int subcursorAbsolute(HDFqlCursor cursor, int position) {
    return HDFqlJNI.subcursorAbsolute(HDFqlCursor.getCPtr(cursor), cursor, position);
  }

  public static int cursorRelative(HDFqlCursor cursor, long position) {
    return HDFqlJNI.cursorRelative(HDFqlCursor.getCPtr(cursor), cursor, position);
  }

  public static int subcursorRelative(HDFqlCursor cursor, int position) {
    return HDFqlJNI.subcursorRelative(HDFqlCursor.getCPtr(cursor), cursor, position);
  }

  public static java.lang.Byte cursorGetTinyint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetTinyint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Byte.valueOf( (byte) convertChar(pointer));
		// Deprecated: return new java.lang.Byte((byte) convertChar(pointer));
	}

  public static java.lang.Byte subcursorGetTinyint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetTinyint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Byte.valueOf( (byte) convertChar(pointer));
		//return new java.lang.Byte((byte) convertChar(pointer));
	}

  public static java.lang.Byte cursorGetUnsignedTinyint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetUnsignedTinyint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Byte.valueOf( (byte) convertChar(pointer));
		//return new java.lang.Byte((byte) convertChar(pointer));
	}

  public static java.lang.Byte subcursorGetUnsignedTinyint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetUnsignedTinyint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Byte.valueOf( (byte) convertChar(pointer));
		//return new java.lang.Byte((byte) convertChar(pointer));
	}

  public static java.lang.Short cursorGetSmallint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetSmallint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Short.valueOf( convertShort(pointer));
		//return new java.lang.Short(convertShort(pointer));
	}

  public static java.lang.Short subcursorGetSmallint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetSmallint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Short.valueOf( convertShort(pointer));
		//return new java.lang.Short(convertShort(pointer));
	}

  public static java.lang.Short cursorGetUnsignedSmallint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetUnsignedSmallint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Short.valueOf( convertShort(pointer));
		//return new java.lang.Short(convertShort(pointer));
	}

  public static java.lang.Short subcursorGetUnsignedSmallint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetUnsignedSmallint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Short.valueOf( convertShort(pointer));
		//return new java.lang.Short(convertShort(pointer));
	}

  public static java.lang.Integer cursorGetInt(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetInt(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Integer.valueOf(convertInt(pointer));
		//return new java.lang.Integer(convertInt(pointer));
	}

  public static java.lang.Integer subcursorGetInt(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetInt(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Integer.valueOf(convertInt(pointer));
		//return new java.lang.Integer(convertInt(pointer));
	}

  public static java.lang.Integer cursorGetUnsignedInt(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetUnsignedInt(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Integer.valueOf(convertInt(pointer));
		//return new java.lang.Integer(convertInt(pointer));
	}

  public static java.lang.Integer subcursorGetUnsignedInt(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetUnsignedInt(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Integer.valueOf(convertInt(pointer));
		//return new java.lang.Integer(convertInt(pointer));
	}

  public static java.lang.Long cursorGetBigint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetBigint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Long.valueOf(convertLong(pointer));
		//return new java.lang.Long(convertLong(pointer));
	}

  public static java.lang.Long subcursorGetBigint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetBigint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Long.valueOf(convertLong(pointer));
		//return new java.lang.Long(convertLong(pointer));
	}

  public static java.lang.Long cursorGetUnsignedBigint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetUnsignedBigint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Long.valueOf(convertLong(pointer));
		//return new java.lang.Long(convertLong(pointer));
	}

  public static java.lang.Long subcursorGetUnsignedBigint(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetUnsignedBigint(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Long.valueOf(convertLong(pointer));
		//return new java.lang.Long(convertLong(pointer));
	}

  public static java.lang.Float cursorGetFloat(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetFloat(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Float.valueOf(convertFloat(pointer));
		//return new java.lang.Float(convertFloat(pointer));
	}

  public static java.lang.Float subcursorGetFloat(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetFloat(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Float.valueOf(convertFloat(pointer));
		//return new java.lang.Float(convertFloat(pointer));
	}

  public static java.lang.Double cursorGetDouble(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.cursorGetDouble(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Double.valueOf(convertDouble(pointer));
		//return new java.lang.Double(convertDouble(pointer));
	}

  public static java.lang.Double subcursorGetDouble(HDFqlCursor cursor) {
		long pointer = HDFqlJNI.subcursorGetDouble(HDFqlCursor.getCPtr(cursor), cursor);


		if (pointer == 0)
		{
			return null;
		}

                return Double.valueOf(convertDouble(pointer));
		//return new java.lang.Double(convertDouble(pointer));
	}

  public static String cursorGetChar(HDFqlCursor cursor) {
    return HDFqlJNI.cursorGetChar(HDFqlCursor.getCPtr(cursor), cursor);
  }

  private static void variableUnregister(int number) {
    HDFqlJNI.variableUnregister(number);
  }

  private static int variableGetDataType(int number) {
    return HDFqlJNI.variableGetDataType(number);
  }

  private static long variableGetCount(int number) {
    return HDFqlJNI.variableGetCount(number);
  }

  private static int variableGetDimensionCount(int number) {
    return HDFqlJNI.variableGetDimensionCount(number);
  }

  private static long variableGetDimension(int number, int index) {
    return HDFqlJNI.variableGetDimension(number, index);
  }

  private static void setEnvironment() {
    HDFqlJNI.setEnvironment();
  }

  private static int variableRegister(int number, int variableTransient, int variableDimensionCount, String variableClass, Object variableFieldList) {
    return HDFqlJNI.variableRegister(number, variableTransient, variableDimensionCount, variableClass, variableFieldList);
  }

  private static long variableSetPrimitive(Object variable, int number, int type, long count) {
    return HDFqlJNI.variableSetPrimitive(variable, number, type, count);
  }

  private static long variableSetObject(Object variable, int number, int type, long count) {
    return HDFqlJNI.variableSetObject(variable, number, type, count);
  }

  private static void variableGetPrimitive(Object variable, int number, int type, long count) {
    HDFqlJNI.variableGetPrimitive(variable, number, type, count);
  }

  private static void variableGetObject(Object variable, int number, int type, long count) {
    HDFqlJNI.variableGetObject(variable, number, type, count);
  }

  private static char convertChar(long pointer) {
    return HDFqlJNI.convertChar(pointer);
  }

  private static short convertShort(long pointer) {
    return HDFqlJNI.convertShort(pointer);
  }

  private static int convertInt(long pointer) {
    return HDFqlJNI.convertInt(pointer);
  }

  private static long convertLong(long pointer) {
    return HDFqlJNI.convertLong(pointer);
  }

  private static float convertFloat(long pointer) {
    return HDFqlJNI.convertFloat(pointer);
  }

  private static double convertDouble(long pointer) {
    return HDFqlJNI.convertDouble(pointer);
  }

  private static int execute(String script, int scriptSize, int programmingLanguage) {
    return HDFqlJNI.execute(script, scriptSize, programmingLanguage);
  }

}
